package com.vsubhuman.telegram.kt_example

import com.amazonaws.services.lambda.runtime.Context
import com.amazonaws.services.lambda.runtime.RequestStreamHandler
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.github.kittinunf.fuel.Fuel
import com.github.kittinunf.result.Result
import com.vsubhuman.telegram.kt_example.model.Update
import com.vsubhuman.telegram.kt_example.model.getFormattedUpdateTime
import java.io.InputStream
import java.io.OutputStream

// Specify bot token as AWS Lambda environment poperty
val bot_token: String = System.getenv("bot_token")
val base_telegram_url = "https://api.telegram.org/bot${bot_token}"
// Read version from file generated by gradle
val version = Main::class.java.getResource("/version").readText()
// Configure mapper to ignore excessive fields
val mapper = jacksonObjectMapper()
        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)!!

class Main : RequestStreamHandler {
    init {
        println("AwsTelegramBot Version: ${version}")
    }
    override fun handleRequest(inp: InputStream?, out: OutputStream?, ctx: Context?) {
        val evt = try {
            mapper.readValue(inp!!, Update::class.java)
        } catch (e: Exception) {
            throw RuntimeException("Failed to parse an event!", e)
        }
        println("Update@${getFormattedUpdateTime(evt)}: $evt")
        evt.message.map {
            val msg = when(it.text.toLowerCase()) {
                "/version" -> "Version: ${version}"
                else -> "Echo> ${it.text}"
            }
            sendMessage(it.chat.id, msg)
        }
    }
}

fun sendMessage(chatId: Long, text: String) {
    val msg = mapOf("chat_id" to chatId, "text" to text)
    println("Sending message: $msg")
    post("${base_telegram_url}/sendMessage", msg)
}

fun post(url: String, body: Any) {
    try {
        val (req, resp, res) = Fuel.post(url)
                .body(mapper.writeValueAsString(body))
                .header("Content-Type" to "application/json")
                .responseString()
        println("Request: $req")
        println("Response: $resp")
        when (res) {
            is Result.Success -> println("POST success: ${res.value}")
            is Result.Failure -> println("POST fail: ${res.error}")
        }
    } catch (e: Exception) {
        throw RuntimeException("Failed to send post request!", e)
    }
}